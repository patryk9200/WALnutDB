#nullable enable
using WalnutDb;
using WalnutDb.Core;
using WalnutDb.Indexing;
using WalnutDb.Wal;

/// <summary>
/// 1) Po delete + checkpoint + reopen unikalność powinna puścić (guardy seedują się z SST).
/// </summary>
public sealed class UniqueReleaseAfterReopenTests
{
    private static string NewTempDir()
    {
        var dir = Path.Combine(Path.GetTempPath(), "WalnutDbTests", "uniq_reopen", Guid.NewGuid().ToString("N"));
        Directory.CreateDirectory(dir);
        return dir;
    }

    private sealed class UDoc
    {
        [DatabaseObjectId]
        public string Id { get; set; } = "";

        [DbIndex("Email", Unique = true)]
        public string? Email { get; set; }
    }

    [Fact]
    public async Task Unique_Releases_After_Delete_Checkpoint_And_Reopen()
    {
        var dir = NewTempDir();
        var walPath = Path.Combine(dir, "wal.log");

        // A: E → CP → delete(A) → CP
        await using (var db = new WalnutDatabase(dir, new DatabaseOptions(), new FileSystemManifestStore(dir), new WalWriter(walPath)))
        {
            var t = await db.OpenTableAsync(new TableOptions<UDoc> { GetId = d => d.Id });
            await t.UpsertAsync(new UDoc { Id = "A", Email = "x@ex.com" });
            await db.CheckpointAsync();
            await t.DeleteAsync("A");
            await db.CheckpointAsync();
        }

        // reopen – B powinien móc wziąć E
        await using (var db2 = new WalnutDatabase(dir, new DatabaseOptions(), new FileSystemManifestStore(dir), new WalWriter(walPath)))
        {
            var t2 = await db2.OpenTableAsync(new TableOptions<UDoc> { GetId = d => d.Id });
            await t2.UpsertAsync(new UDoc { Id = "B", Email = "x@ex.com" });

            var s = IndexKeyCodec.Encode("x@ex.com");
            var e = IndexKeyCodec.PrefixUpperBound(s);

            int cnt = 0;
            string? onlyId = null;
            await foreach (var u in t2.ScanByIndexAsync("Email", s, e))
            {
                cnt++; onlyId = u.Id;
            }

            Assert.Equal(1, cnt);
            Assert.Equal("B", onlyId);
        }
    }
}
